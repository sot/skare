#!/usr/bin/python

"""
Print to stdout the appropriate shell commands to initialize the standalone
Ska environment.

Usage::

  usage: flt_envs [-h] [-shell SHELL]

  Set flight environment vars

  optional arguments:
    -h, --help    show this help message and exit
    -shell SHELL  Shell name (csh|tcsh|bash|sh|ksh) default=bash
"""

import os
from os.path import dirname, abspath
import sys
import argparse
import platform

parser = argparse.ArgumentParser(description='Set flight environment vars')
parser.add_argument('-shell', type=str,
                    default='bash',
                    help='Shell name (csh|tcsh|bash|sh|ksh) default=bash')
args = parser.parse_args()

uname_tuple = platform.uname()
# platform.uname returns a tuple of strings (system,node,release,version,machine,processor)
# uname is intended to be like linux-x86_64
uname = "{0}-{1}".format(uname_tuple[0], uname_tuple[4]).lower()

# Use the convention that flt_envs must be in $SKA/bin to derive SKA and
# OVERRIDE any existing value.
ska = dirname(dirname(abspath(__file__)))  # from $SKA/bin/flt_envs to $SKA

# Set environment vars
envs = dict(('SKA_' + suffix.upper(), os.path.join(ska, suffix))
        for suffix in ('arch', 'data', 'lib', 'share', 'bin', 'idl'))
ska_arch_os = os.path.join(ska, 'arch', uname)
envs['SKA_ARCH_OS'] = ska_arch_os
envs['SKA'] = ska
envs['SYBASE_OCS'] = 'OCS-15_0'
envs['PGPLOT_DIR'] = os.path.join(ska_arch_os, 'pgplot')
envs['SYBASE'] = '/soft/SYBASE15.7'
envs['CFITSIO'] = ska_arch_os

# For these paths, prepend SKA paths but let any existing
# values in the environment stay
envs['PERL5LIB'] = ":".join([os.path.join(ska, 'lib', 'perl'),
                             os.path.join(ska, 'lib', 'perl', 'lib')])
envs['LD_LIBRARY_PATH'] = ":".join([os.path.join(ska_arch_os, 'lib'),
                                    os.path.join(ska_arch_os, 'pgplot')])
for libpath in ['PERL5LIB', 'LD_LIBRARY_PATH']:
    if libpath in os.environ and os.environ[libpath] != '':
        envs[libpath] = ":".join([envs[libpath],
                                  os.environ[libpath]])


paths = os.environ['PATH'].split(':')
ska_bin = envs['SKA_BIN']
while ska_bin in paths:
    # I've forgotten why this is needed
    paths.remove(ska_bin)
paths.insert(0, os.path.join(ska_arch_os, 'bin'))
paths.insert(0, ska_bin)
envs['PATH'] = ':'.join(paths)


# Print environment vars correctly for specified shell
shell_cmd = 'setenv {0} {1}' if (args.shell in ('tcsh', 'csh')) else 'export {0}={1}'
for name, val in envs.items():
    print(shell_cmd.format(name, val))


    
    
